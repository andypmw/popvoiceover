import React from 'react';
import Head from 'next/head'
import axios from 'axios';
import AudioPlayer from './main/AudioPlayer';

export default class extends React.Component {
  constructor(props: any) {
    super(props);

    this.handleSourceLanguageCodeChange = this.handleSourceLanguageCodeChange.bind(this);
    this.handleSourceTextChange = this.handleSourceTextChange.bind(this);
    this.handleTranslateButton = this.handleTranslateButton.bind(this);
    this.handleTargetLanguageCodeChange = this.handleTargetLanguageCodeChange.bind(this);
    this.handleTargetTextChange = this.handleTargetTextChange.bind(this);
    this.handleSynthButton = this.handleSynthButton.bind(this);


    this.state = {
      sourceLanguageCode: 'id',
      sourceText: '',
      translationState: 'idle',

      speechLanguageCode: 'en-US',
      targetText: '',
      synthesizeState: 'idle',

      audioFileUrl: '',
    };
  }

  handleSourceLanguageCodeChange(e: any) {
    this.setState({ sourceLanguageCode: e.target.value });
  }

  handleSourceTextChange(e: any) {
    this.setState({ sourceText: e.target.value });
  }

  async handleTranslateButton() {
    this.setState({ translationState: 'processing' });

    const body = {
      Text: this.state.sourceText,
      SourceLanguageCode: this.state.sourceLanguageCode,
      TargetLanguageCode: this.props.translateToPollyMap[this.state.speechLanguageCode],
    };

    const res = await (await axios.post('http://localhost:4000/translates/', body)).data;
    
    this.setState({ targetText: res.TranslatedText, translationState: 'idle' });
  }

  handleTargetLanguageCodeChange(e: any) {
    this.setState({ speechLanguageCode: e.target.value });
  }

  handleTargetTextChange(e: any) {
    this.setState({ targetText: e.target.value });
  }

  async handleSynthButton() {
    this.setState({ synthesizeState: 'processing' });

    const body = {
      Text: this.state.targetText,
      LanguageCode: this.state.speechLanguageCode,
    };

    const res = await (await axios.post('http://localhost:4000/speeches/', body)).data;

    console.log('listen button clicked');
    console.log(res);

    this.setState({ audioFileUrl: 'http://localhost:4000/' + res.FileName, synthesizeState: 'idle' });
  }

  render() {
    const defaultSourceLanguageCode = 'id';
    const defaultTargetLanguageCode = 'en-US';

    return (
      <div className="flex flex-wrap min-h-screen items-center justify-center gap-2 p-2 bg-slate-100">
        <Head>
          <title>Voice Over Generator</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        
        <div className="w-full md:w-1/4 bg-white border-2 border-slate-300 shadow-lg">
          <div className="py-2 px-5 bg-slate-200">
            <h1 className="text-xl font-medium">
              1 - Translator
            </h1>
          </div>
          <div className="px-5 py-3">
            <div className="mb-2">Source language</div>
            <select
              className="w-full p-1 mb-2 border-2 border-slate-400"
              defaultValue={defaultSourceLanguageCode}
              onChange={e => this.handleSourceLanguageCodeChange(e)}
            >
              {this.props.translateSourceLanguages.map(lang => (
                <option
                  key={lang.code}
                  value={lang.code}
                >
                  {lang.name}
                </option>
              ))}
            </select>
            <textarea
              className="w-full p-3 border-2 border-slate-400"
              rows={8}
              onChange={this.handleSourceTextChange}
            />
          </div>
          <div className="flex justify-end px-5 pb-3">
            <button
              onClick={this.handleTranslateButton}
              className="py-2 px-5 border-2 border-slate-400 hover:bg-sky-100 active:bg-sky-200"
            >
              {this.state.translationState === 'idle'? 'Translate' : 'Translating...'}
            </button>
          </div>
        </div>
        
        <div className="w-full md:w-1/4 bg-white border-2 border-slate-300 shadow-lg">
          <div className="py-2 px-5 bg-slate-200">
            <h1 className="text-xl font-medium">
              2 - Voice Maker
            </h1>
          </div>
          <div className="px-5 py-3">
            <div className="mb-2">Speech language</div>
            <select
              className="w-full p-1 mb-2 border-2 border-slate-400"
              defaultValue={defaultTargetLanguageCode}
              onChange={e => this.handleTargetLanguageCodeChange(e)}
              disabled={this.state.translationState === 'processing'}
            >
              {this.props.speechLanguages.map(lang => (
                <option
                  key={lang.code}
                  value={lang.code}
                >
                  {lang.name}
                </option>
              ))}
            </select>
            <textarea
              className="w-full p-3 border-2 border-slate-400"
              rows={8}
              value={this.state.targetText}
              onChange={this.handleTargetTextChange}
              disabled={this.state.translationState === 'processing'}
            />
          </div>
          <div className="flex justify-end px-5 pb-3">
            <button
              onClick={this.handleSynthButton}
              className="py-2 px-5 border-2 border-slate-400 hover:bg-sky-100 active:bg-sky-200"
            >
              {this.state.synthesizeState === 'idle'? 'Synthesize' : 'Synthesizing...'}
            </button>
          </div>
        </div>

        <AudioPlayer
          url={this.state.audioFileUrl}
          synthesizeState={this.state.synthesizeState}
        />

        <footer className="flex h-24 w-full items-center justify-center border-t">
          Created by Andy Primawan
        </footer>
      </div>
    );
  }
}